Encapsulation(캡슐화)
목표: 불필요한 정보를 외부에 감추는 것

객체지향에서도 캡슐화를 위한 것이 있는데 그것이 access modifier(접근제어자)
객체를 사용하는 입장에서 객체가 가지고있는 인스턴스 변수나 함수를 접근 할 수 있게 하느냐?
이것이 핵심!

인스턴스 변수에 직접 엑세스하면 예를들어 없는 파일 이면 거절할 방법이 없다. ex($file->filename = 'sadfdsaf.txt');
생성자를 사용해서 초기 세팅할 때 막을 수가 있다.

파일 이름 값을 객체 외부에서는 세팅을 못하게 하는게 access modifier(접근제어자)
private은 외부에서 접근 불가
set으로 값을 세팅하고
get으로 값을 가져온다

사용자의 입장에서 필요한 기능만 보여주는 것이 좋다

상속(Inheritance)

Parent Object(original) -> Child Object
P의 메소드를 C가 그대로 사용할 수 있다.
C에 메소드를 추가하여 P에는 없는 기능을 사용할 수 있다.

상속을 이용하면 '그냥 가져다 쓰고 추가적으로 뭔가를 만들어라' 이것이 가능
코드 양도 획기적으로 줄어든다
