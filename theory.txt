Encapsulation(캡슐화)
목표: 불필요한 정보를 외부에 감추는 것

객체지향에서도 캡슐화를 위한 것이 있는데 그것이 access modifier(접근제어자)
객체를 사용하는 입장에서 객체가 가지고있는 인스턴스 변수나 함수를 접근 할 수 있게 하느냐?
이것이 핵심!

인스턴스 변수에 직접 엑세스하면 예를들어 없는 파일 이면 거절할 방법이 없다. ex($file->filename = 'sadfdsaf.txt');
생성자를 사용해서 초기 세팅할 때 막을 수가 있다.

파일 이름 값을 객체 외부에서는 세팅을 못하게 하는게 access modifier(접근제어자)
private은 외부에서 접근 불가
set으로 값을 세팅하고
get으로 값을 가져온다

사용자의 입장에서 필요한 기능만 보여주는 것이 좋다

상속(Inheritance)

Parent Object(original) -> Child Object
P의 메소드를 C가 그대로 사용할 수 있다.
C에 메소드를 추가하여 P에는 없는 기능을 사용할 수 있다.

상속을 이용하면 '그냥 가져다 쓰고 추가적으로 뭔가를 만들어라' 이것이 가능
코드 양도 획기적으로 줄어든다

Static (정적)
static이붙으면 클래스 변수가 된다
static한 property는 상태공유가 가능
클래스 소속의 멤버를 만들때 사용
스태틱이 없는 프로퍼티나 메소드는 인스턴스의 멤버를 만든다.
클래스 내에서 인스턴스에 대한 자기자신을 원할때는 $this 클래스에 대한 자기 자신을 원할때는 ::


Class loading
다른 파일에 있는 클래스를 로딩
Namespace(= package)
클래스를 그룹화

namespace가 다르면 클래스 이름이 같아도 사용 가능하다.


Composer
php package manager
php파일에 대한 관리자 역할

composer init으로 composer가 관리하게끔 초기화

https://packagist.org/에서 여러 package들이 있다.

composer.lock이 생김
autoload.php를 한번만 인클루드시켜주면 나머지 복잡한건 composer가 알아서 해준다.

컴포저를 이용해 소스코드를 관리하면 소스 추적이 일관적이고 통합적이다.

상속(override & parent)
상속이라는 기능이 추가되면서 복잡성이 생김

상속을 했을때 생길 수 있는 여러가지 경우의 수

이미 부모가 가지고 있는 기능을 자식클래스에서 덮어쓰기 하고 싶을때?
부모클래스에 대해 자식클래스가 메소드를 오버라이드 했다라고 함 (재정의)

상속을 할때 부모가 가지고 있지 않는 기능 추가는 물론이고 부모가 가지고 있는 기능을 덮어쓰기 하는경우
똑같은 이름,형식을 정의 하면 된다.

기존에 있었던 부모가 가지고 있던 메소드를 가르키고 싶을때는 parent를 가지고 지정 하면 된다.

캡슐화의 핵심역할: 접근제어자
private : 본인만 가능 부모자식 간에도 본인만
protected : 부모 자식간에는 가능하지만 메소드 바깥에서는 안됨
public : 어디서나 가능

상속과 final
상속의 기본: 부모 클래스가 가지고 있는 메소드들을 물려받는 것, 부모가 물려 주지 않은 메소드를 추가하는것, 부모가 물려준 메소드를 덮어쓰는 것(재정의 override)
경우에 따라서는 부모클래스가 가진 메소드를 상속받지 않게 하고 싶을 수 있다. (상속을 원하지 않는 경우)
그럴때 final을 쓰면됨

final을 붙여주면 상속을 하지 못하게함 method뿐 아니라 Class도 가능
언제 쓰느냐?
아직 클래스가 완성이 안되었을 때 혹은 자꾸 바뀌어야 할거 같을 때

Interface
아울렛과 플러그

프로그래밍 측면에서 규제
규제안에서 각각의 구현을 자유롭게 하기위해

코드레벨
ex) class A implements FooInterface

A클래스는 FooInterface에 정의되어 있는 메소드를 반드시 구현 해야한다!
만약 메소드가 없으면 실행이 안됨

Type Hinting
인자의 타입, return 타입을 제시하면 좀 더 규격이 강화된다.

인터페이스는 (코드에서) 사회적인 계약이라고 보면됨
어떤 클래스가 어떤 메소드를 가질것인가? 이런것을 정의 하는게 인터페이스

